%% OMEGA: Script for automatic preprocessing
% 
% 1) Import MEG + Convert to continuous (CTF) + Refine registration
% 2) PSD on sensosrs (pre)
% 3) Notch filter (50Hz and harmonics, also 49 Hz and 88 Hz) + High bandpass (0.3 Hz)
% 4) Detect and remove blinks and cardiac
% 5) PSD on sensosrs (post) *skip for now
%
% Saves Report
%
% This script needs function: create_html_report.m and Omg_check_rename.m
%
% 1 June 2021 (v2)
% Guiomar Niso, 26 May 2016 (v1)
% Guiomar Niso, 6 May 2015 (v0)

clc; clear;

%% ==== PARAMETERS ================================================

% 1) MEG datasets storage
mydirMEG = 'C:\Users\Maria\OneDrive - Universidad Politécnica de Madrid\TFM\Pruebas_sujetos\';
% 2) Dir to save progress report
mydirBST = 'C:\Users\Maria\OneDrive - Universidad Politécnica de Madrid\TFM\Reports';

% OMEGA protocol
omegaProt = 'CAMCAN_BSTdb_v1';

% -------------------------------------------------------------------------

% Frequencies to filter with the notch (power line 50Hz and harmonics, also 49Hz and 88Hz)
freqs_notch = [50:50:450, 49, 88];

% Filters
highpass = 0.3;
lowpass = 0; % 0: no filter

% Window length and overlap for PSD Welch method
win_length = 4; % sec
win_overlap = 50; % percentage

% =========================================================================

%% Prepare MEG files

SubjectNames = {'sub-emptyroom'};

for iSubject=1:numel(SubjectNames)
       
%% ==== 1) Import MEG files =======================================

% For Brainstorm
sFiles0 = [];
% Start a new report
bst_report('Start', sFiles0);

% SELECCIONAR SUJETO
%
% Process: Select file names with tag: SUBJECT NAME
sFilesMEG = bst_process('CallProcess', 'process_select_files_data', ...
    sFiles0, [], ...
    'tag', '', ...
    'subjectname', SubjectNames{iSubject}, ...
    'condition', '');

% Process: Select file names with tag: emptyroom
sFilesNOISE = bst_process('CallProcess', 'process_select_tag', ...
    sFilesMEG, [], ...
    'tag', 'emptyroom', ...
    'search', 1, ...
    'select', 1);  % Select only the files with the tag

if isempty(sFilesMEG), return; end


%% ==== 2) PSD on sensors (before filtering) ======================

% Process: Power spectrum density (Welch)
sFilesPSDpre = bst_process('CallProcess', 'process_psd', ...
    sFilesNOISE, [], ...
    'timewindow', [], ...
    'win_length', win_length, ...
    'win_overlap', win_overlap, ...
    'sensortypes', 'MEG, EEG', ...
    'edit', struct(...
         'Comment', 'Power', ...
         'TimeBands', [], ...
         'Freqs', [], ...
         'ClusterFuncTime', 'none', ...
         'Measure', 'power', ...
         'Output', 'all', ...
         'SaveKernel', 0));

%** Process: Snapshot: Frequency spectrum
bst_process('CallProcess', 'process_snapshot', ...
    sFilesPSDpre, [], ...
    'target', 10, ...  % Frequency spectrum
    'modality', 1, ...  % MEG (All)
    'orient', 1, ...  % left
    'time', 0, ...
    'contact_time', [0, 0.1], ...
    'contact_nimage', 12, ...
    'threshold', 30, ...
    'comment', '');


%% ==== 3)  Notch filter + High pass (0.3 Hz) =====================

% Process: Notch filter: 50Hz 100Hz 150Hz 200Hz 250Hz 300Hz 350Hz 400Hz 450Hz
%                        49Hz 88Hz
sFilesNotch = bst_process('CallProcess', 'process_notch', ...
    sFilesNOISE, [], ...
    'freqlist', freqs_notch, ...
    'sensortypes', 'MEG, EEG', ...
    'read_all', 0); 

% Process: High-pass:0.3Hz
sFilesNotchHigh = bst_process('CallProcess', 'process_bandpass', ...
    sFilesNotch, [], ...
    'highpass', highpass, ...
    'lowpass', lowpass, ...
    'mirror', 1, ...
    'sensortypes', 'MEG, EEG', ...
    'read_all', 0);

% Delete intermediate files (Notch) 
for iRun=1:numel(sFilesNotch)
    % Process: Delete data files
    bst_process('CallProcess', 'process_delete', ...
        sFilesNotch(iRun).FileName, [], ...
        'target', 2);  % Delete conditions
end


%% ==== 5) PSD on sensors (after filtering) ======================

% Process: Power spectrum density (Welch)
sFilesPSDpost = bst_process('CallProcess', 'process_psd', ...
    sFilesNotchHigh, [], ...
    'timewindow', [], ...
    'win_length', win_length, ...
    'win_overlap', win_overlap, ...
    'sensortypes', 'MEG, EEG', ...
    'edit', struct(...
         'Comment', 'Power', ...
         'TimeBands', [], ...
         'Freqs', [], ...
         'ClusterFuncTime', 'none', ...
         'Measure', 'power', ...
         'Output', 'all', ...
         'SaveKernel', 0));

% ** Process: Snapshot: Frequency spectrum
bst_process('CallProcess', 'process_snapshot', ...
    sFilesPSDpost, [], ...
    'target', 10, ...  % Frequency spectrum
    'modality', 1, ...  % MEG (All)
    'orient', 1, ...  % left
    'time', 0, ...
    'contact_time', [0, 0.1], ...
    'contact_nimage', 12, ...
    'threshold', 30, ...
    'comment', '');




%% SAVE REPORT ====================================================

% Save and display report
ReportFile = bst_report('Save', sFiles0);
bst_report('Open', ReportFile);
bst_report('Export', ReportFile, mydirBST);

end